function letor_regression(dataset)
% The function should be called with the path of the dataset from
% the Letor 3.0 distribution. For instance, if you are in
% Gov/QueryLevelNorm, type: letor_regression('2003_hp_dataset')

  mkdir(dataset,['regression']) % Where the prdictions and metrics will be stored
  for i=1:5, % Loop over the folds
    % Read the training and validation data
    dname = [dataset '/Fold' num2str(i) '/'];
    [X, Y ] = read_letor([dname '/train.txt']); 
    [Xt,Yt] = read_letor([dname '/vali.txt']);
    
    Y=2.^cat(1,Y{:})-1; % Like the gain in DCG -> gives higher target to very relevant documents
    % Reweight the relevant examples such that the total weights of
    % relevant and non-relevant examples are the same.
    D = ones(1,size(X,1));
    D(Y>0) = sum(Y==0) / sum(Y>0);
    % Correlation matrix
    C = X'*(X.*repmat(D',1,size(X,2)));
    
    % Ridge regression; try different values of the ridge. 
    for j=1:6
      ridge = mean(diag(C))*10^(j-5);
      w(:,j) = (C+ridge*eye(length(C))) \ (X'*(D'.*Y));
      map(j) = compute_map(Xt*w(:,j),Yt); % MAP value on the validation set
    end;
    fprintf('C = %f, MAP = %f\n',[10.^[-4:1]; map])
    [foo, j] = max(map); % Best MAP value
    w = w(:,j);
    % Print predictions and compute the metrics.
    write_out(X*w,i,'train',dataset)
    write_out(Xt*w,i,'vali',dataset)
    [Xt,Yt] = read_letor([dname '/test.txt']);
    write_out(Xt*w,i,'test',dataset)
  end;
  
function [X,Y] = read_letor(filename)
  f = fopen(filename);
  X = zeros(2e5,0);
  qid = '';
  i = 0; q = 0;
  while 1
    l = fgetl(f);
    if ~ischar(l), break; end;
    i = i+1; 
    [lab,  foo1, foo2, ind] = sscanf(l,'%d qid:',1); l(1:ind-1)=[];
    [nqid, foo1, foo2, ind] = sscanf(l,'%s',1); l(1:ind-1)=[]; 
    if ~strcmp(nqid,qid)
      q = q+1;
      qid = nqid;
      Y{q} = lab;
    else 
      Y{q} = [Y{q}; lab];
    end;
    tmp = sscanf(l,'%d:%f'); 
    X(i,tmp(1:2:end)) = tmp(2:2:end);
  end;
  X = X(1:i,:);
  fclose(f);

function write_out(output,i,name,dataset)
  output = output + 1e-10*randn(length(output),1); % Break ties at random
  fname = [dataset '/regression/' name '.fold' num2str(i)];
  save(fname,'output','-ascii');
  % Either copy the evaluation script in the current directory or
  % change the line below with the correct path 
  system(['perl Eval-Score-3.0.pl ' dataset '/Fold' num2str(i) '/' name ...
          '.txt ' fname ' ' fname '.metric 0']);

function map = compute_map(Y,Yt)
  ind = 0;
  for i=1:length(Yt)
    ind = ind(end)+[1:length(Yt{i})];
    [foo,ind2] = sort(-Y(ind));
    r = Yt{i}(ind2)>0;
    p = cumsum(r) ./ [1:length(r)]';
    if sum(r)> 0 
      map(i) = r'*p / sum(r);
    else
      map(i)=0;
    end;
  end;
  map=mean(map);